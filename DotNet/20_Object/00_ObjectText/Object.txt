객체 만들기
우리는 앞서 닷넷에서 제공하는 수많은 클래스를 사용해보았습니다. 
이번 시간에는 이러한 클래스와 개체들을 직접 만들어 보겠습니다.
객체(object, 오브젝트)는 설계도인 클래스로부터 만들어진 
하나의 인스턴스(실체, 구성 요소)를 말합니다.

객체: 설계도인 클래스로부터 만들어진 하나의 인스턴스(실체, 구성 요소)

개요
클래스
 ㅁ 데이터 보관 관점
 하나의 이름으로 여러 개의 데이터형식을 여러 개 보관해 
 놓는 그릇 역할에 어떠한 기능 추가해서 함께 묶어서 정리

 ㅁ 클래스의 의미
 설계도(클래스)의 의미
 - 프로그램 세계의 데이터 저장 공간(필드)과 
   기능(메서드)을 하나의 이름(클래스명/개체명)으로 관리
 - 클래스는 컨테이너(Contatiner) 역할
 - 클래스의 인스턴스인 객체는 하나의 완성된 단위

 - 객체를 생성해 주는 틀
 - 객체들의 특성들을 기술
 - 개념적, 가상적
 - 프로그램 텍스트상에서만 존재
 - 디자인 단계에서의 관심사
 - 현실 세계의 자동차 설계도

개체(Object, Instance)
- 어떤 클래스의 인스턴스
- 객체마다 각각의 상태 보유
- 물리적, 실제적
- 실행 시에만 존재
- 실행 단계의 관심사
- 자동차 설계도로부터 만들어진 하나의 자동차

클래스의 멤버
	- 메서드
	- 속성
	- 생성자
	- 소멸자
	- 대리자
	- 이벤트

클래스 만들기
	[액세스한정자] class 클래스명 {}
	public class MyClass {}

개체(Object) 생성 순서
Step 1: 메모리 할당
힙(heap)에 메모리를 할당하기 위해서는 new 키워드를 사용
- new: 참조 연산자

Step 2: 생성자를 통한 개체 초기화
클래스의  이름과 괄호 기호를 사용

Date 클래스의 인스턴스(실체) 생성 => when 개체 생성 
Date when = new Date();

Object LifeCycle
- 객체 생성 시기
new 연산자를 이용한 메모리를 할당하고 개체를 생성
생성자를 이용해 메모리 상의 개체 초기화

- 객체 사용 시기
객체에 대한 메서드, 멤버 호출 / 접근

-객체 소멸 시기
객체에게 할당된 메모리는 실행 환경으로 회수
메모리 해제
소멸 시기가 버결정적임
Garbage Collector (GC)가 객체 소멸을 관장한다.

Class LifeCycle
- 할당(ALLocation)
Managed heap 메모리 공간에 CLR에 의해서 객체를 위한 메모리 할당

- 인스턴스화(Instantiation)
클래스의 구조에 맞게 메모리 초기화
클래스의 생성자(Constructor)가 호출됨

- 해제(Deallocationm)
가비지 수집기(GC, Garbage Collector)가 사용되지 않는 객체를 소멸
경우에 따라서는 IDisposable 인터페이스를 구현하여 Dispose 메서드를 구현할 수 있음

 정적(스태틱)멤버와 인스턴스 멤버
 정적(static) 멤버 : static 키워드가 붙은 멤버
 - 정적 필드
 - 정적 메서드
 - 접근
 "클래스명.멤버명"
 Math 클래스

 인스턴스 멤버
 - 클래스내에서 static 키워드가 붙지않은 멤버
 - 클래스의 인스턴스 생성 후 멤버에 접근
 - static 키워드 제거
 - 접근
 클래스 객체 = new 클래스();
 "객체.멤버명"

 객체 지향 프로그래밍 === 묶어서 관리
 - Object Oriented Programming(OOP)
 현실 세계를 모델링(추상화)하여 프로그래밍화 한 것
 OOP는 S/W 개발을 좀 더 쉽고 편리하게 하는 기술
 현실세계와는 확연히 다름

 - 객체 지향 프로그래밍 언어
 C++/C#/Java

 - OOP의 3가지 큰 개념
 캡슐화(Encapsulation)
 상속(Inheritance)
 다형성(Polymorphism)

 - 특징
 재 사용성(ReUse)
 Component Based Development

 클래스(Class)
 - 데이터(멤버변수;필드)와 메서드(기능;함수)를 결합
 - 접근 권한의 통제
 메서드는 public, 외부로부터 접근이 가능
 데이터(멤버)는 private, 내부에서만 접근 가능
 public, protected, internal, private

 - 상속(Inheritance)
 상속은 클래스간의 관계
 기존의 클래스를 상속 받아 새로운 클래스를 만든다.
 단일상속 및 다중상속 가능(Interface에 의해)

 인터페이스 (Interface)
 단지 operation만으로 구성되어져 있음
 실제 구현을 가지지 않음

