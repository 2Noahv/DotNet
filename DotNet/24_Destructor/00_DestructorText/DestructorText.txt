소멸자(Destructor)
- 생성자와 반대 개념으로 클래스로부터 인스턴스화된 객체가 
  메모리 상에서 없어질 때 발생하는 메서드

- C#에서는 .NET Framework의 GC(Garbage Collector)가 객체
  소멸시 메모리 해제 등의 역할을 대신해 주기 때문에 소멸자를 직접
  접근할 일은 없음

- 자동차 시동 끄는 기능으로 비유가 가능하며 운전수가 주차하고 시동
  끄는 행위를 진행하는 게 아닌 주차요원(GC)이 이 모든 것을 대신 해주는
  것과 의미가 같음


  using 구문을 사용한 객체 소멸시기 결정

  참고용 형식
  using (Resource r1 = new Resource())
  {
		r1.Method();
  }
  블록의 끝에서 자동적으로 선언된 객체 해제

  가비지 수집기(Garbage Collector)  닷넷에 내장되어 있는 서비스 기능
  - 자동차(Car) 객체와 관련하여
  소말자: 좋은 호텔 앞에서의 주차 요원 역할
  왜? 키를 받고 알아서 시동을 꺼주기 때문에

  - 객체의 라이프 사이클(The Object Life Cycle)
  - 값형과 참조형의 할당된 자원 관리 비교


  객체의 라이프 사이클(Object Life Cycle)
  - 메모리 할당
  new 키워드

  - 객체 초기화
  생성자(Constructor)에 의한 객체 생성/초기화

  - 객체 사용
  속성, 메서드 및 기타 멤버 사용

  - 객체 소멸
  소멸자에 의한 객체 정리

  - 메모리 반환



  값형과 참조형 메모리 자원 관리 비교

  - 값형(Value Type)
  Stack에 저장됨
  LIFO: 나중에 만들어진 변수부터 먼저 소멸됨
  해당 범위(Scope)를 벗어나면 자동으로 소멸됨
  메모리 단편화(memory fragmentation)가 없음

  private void MyMethod(...)
  {
		double y = _i;
		in x = ...;
		...

		// x, y는 여기 시점에서 바로 소멸
  }

  String s = ...;
  MyClass c = ...;

  ===========================================================
  
  - 참조형(Reference Type)
  Heap에 저장됨
  FIFO
  동일 객체를 여러 번 참조 가능
  하나라도 참조하고 있으면 소멸되지 않음
  메모리 단편화(memory fragmentation)의 원인이 될 수 있음
  가비지 컬렉터(Garbage Collector)에 의해 관리됨

    private void MyMethod2(...)
  {
		String t = s;
		MyClass d = c;
		...
		// 참조된 t와 d는 여기 시점에서 소멸
		// s와 c는 힙 메모리에 아직 존재
  }


